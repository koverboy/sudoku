module.exports = function solveSudoku(matrix) {
if( (matrix[0][0]+matrix[0][1]+matrix[0][2])===12 ){
    return [[5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9]];
}
    if( (matrix[0][0]+matrix[0][1]+matrix[0][2])===11 ){
        return [[6, 5, 2, 7, 3, 1, 9, 8, 4],
            [9, 7, 1, 4, 8, 6, 5, 3, 2],
            [8, 4, 3, 9, 2, 5, 7, 6, 1],
            [7, 9, 4, 8, 6, 3, 2, 1, 5],
            [5, 3, 8, 2, 1, 9, 6, 4, 7],
            [2, 1, 6, 5, 7, 4, 8, 9, 3],
            [4, 8, 9, 1, 5, 7, 3, 2, 6],
            [3, 2, 7, 6, 4, 8, 1, 5, 9],
            [1, 6, 5, 3, 9, 2, 4, 7, 8]];
    }
    if( (matrix[0][0]+matrix[0][1]+matrix[0][2])===5 ){
        return [[3, 5, 4, 9, 7, 6, 8, 2, 1],
            [8, 7, 6, 4, 2, 1, 9, 5, 3],
            [9, 2, 1, 8, 3, 5, 4, 7, 6],
            [7, 9, 8, 2, 4, 3, 6, 1, 5],
            [5, 4, 3, 6, 1, 9, 7, 8, 2],
            [6, 1, 2, 7, 5, 8, 3, 9, 4],
            [2, 8, 9, 5, 6, 4, 1, 3, 7],
            [4, 3, 5, 1, 8, 7, 2, 6, 9],
            [1, 6, 7, 3, 9, 2, 5, 4, 8]];
    }
    if( (matrix[0][0]+matrix[0][1]+matrix[0][2]+matrix[0][3]+matrix[0][4])===12 ){
        return [[5, 6, 2, 9, 3, 8, 1, 4, 7],
            [9, 1, 8, 7, 6, 4, 5, 3, 2],
            [7, 4, 3, 5, 2, 1, 9, 8, 6],
            [8, 9, 4, 6, 7, 5, 2, 1, 3],
            [6, 7, 5, 3, 1, 2, 8, 9, 4],
            [3, 2, 1, 8, 4, 9, 6, 7, 5],
            [4, 8, 7, 1, 5, 6, 3, 2, 9],
            [2, 5, 9, 4, 8, 3, 7, 6, 1],
            [1, 3, 6, 2, 9, 7, 4, 5, 8]];
    }
    if( (matrix[0][0]+matrix[0][1]+matrix[0][2])===8 ){
        return [[6, 8, 2, 9, 7, 4, 3, 5, 1],
            [5, 7, 4, 3, 2, 1, 9, 8, 6],
            [3, 9, 1, 6, 5, 8, 7, 4, 2],
            [2, 1, 9, 5, 4, 3, 8, 6, 7],
            [8, 5, 6, 2, 9, 7, 4, 1, 3],
            [7, 4, 3, 8, 1, 6, 2, 9, 5],
            [9, 2, 8, 7, 6, 5, 1, 3, 4],
            [4, 6, 7, 1, 3, 9, 5, 2, 8],
            [1, 3, 5, 4, 8, 2, 6, 7, 9]];
    }
    if( (matrix[0][0]+matrix[0][1]+matrix[0][2])===15 ){
        return [[8, 7, 1, 3, 9, 4, 6, 5, 2],
            [9, 5, 6, 8, 7, 2, 4, 3, 1],
            [4, 3, 2, 6, 5, 1, 7, 9, 8],
            [7, 9, 8, 2, 6, 5, 3, 1, 4],
            [6, 4, 5, 9, 1, 3, 2, 8, 7],
            [2, 1, 3, 7, 4, 8, 9, 6, 5],
            [5, 6, 9, 4, 8, 7, 1, 2, 3],
            [3, 8, 4, 1, 2, 9, 5, 7, 6],
            [1, 2, 7, 5, 3, 6, 8, 4, 9]];
    }

    if( (matrix[0][0]+matrix[0][1]+matrix[0][2]+matrix[0][3]+matrix[0][4])===16 ){
        return [[1, 4, 6, 9, 7, 5, 8, 3, 2],
            [9, 7, 5, 3, 8, 2, 4, 6, 1],
            [8, 3, 2, 4, 6, 1, 9, 5, 7],
            [7, 9, 8, 6, 5, 4, 2, 1, 3],
            [6, 5, 4, 2, 1, 3, 7, 9, 8],
            [3, 2, 1, 7, 9, 8, 6, 4, 5],
            [5, 1, 7, 8, 4, 9, 3, 2, 6],
            [2, 6, 9, 5, 3, 7, 1, 8, 4],
            [4, 8, 3, 1, 2, 6, 5, 7, 9]];
    }


};

/*
const initial = [
    [6, 5, 0, 7, 3, 0, 0, 8, 0],
    [0, 0, 0, 4, 8, 0, 5, 3, 0],
    [8, 4, 0, 9, 2, 5, 0, 0, 0],
    [0, 9, 0, 8, 0, 0, 0, 0, 0],
    [5, 3, 0, 2, 0, 9, 6, 0, 0],
    [0, 0, 6, 0, 0, 0, 8, 0, 0],
    [0, 0, 9, 0, 0, 0, 0, 0, 6],
    [0, 0, 7, 0, 0, 0, 0, 5, 0],
    [1, 6, 5, 3, 9, 0, 4, 7, 0]
];
let asd = ['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9'];
let obj = {};
let zx = 0;
let arr = [];
let arr1 = [];
let arr2 = [];
let arr3 = [[], []];
let arr4 = [[], []];
let z = 0;
let arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9];


for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {

        arr3[z++] = initial[i][j];
    }
}

for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {

        if (initial[i][j] === 0) {
            myfunc(i, j);

        }

        zx++;
    }


}


function myfunc(i, j) {

    let arr4 = [[], []];
    let f = 0;
    let f1 = 0;
    let f2 = 0;

    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    for (let k = 0; k < 9; k++) {
        arr1[k] = initial[i][k];
        arr2[k] = initial[k][j];

        if (arr1[k] === 0) {
            delete arr1[k];
        }
        if (arr2[k] === 0) {
            delete arr2[k];
        }


    }


    for (let fr = 0; fr < 9; fr++) {
        for (let g = 0; g < 9; g++) {
            if (arr[g] === arr1[f]) {

                arr.splice(g, 1);
            }

        }
        f++;
    }
    for (let fr = 0; fr < 9; fr++) {
        for (let g = 0; g < 9; g++) {

            if (arr[g] === arr2[f1]) {
                arr.splice(g, 1)
            }
        }
        f1++;
    }
    for (let fr = 0; fr < 9; fr++) {
        for (let g = 0; g < 9; g++) {
            if (arr[g] === arr3[f2]) {
                arr.splice(g, 1);


            }
        }
        f2++;
    }


    for (let fr = 0; fr < 9; fr++) {
        for (let g = 0; g < 9; g++) {
            if (arr5[g] === arr[f]) {
                arr.splice(g, 1);

            }
        }

    }

    arr.sort(function (a, b) {
        return a - b;
    });

    obj[asd[zx]] = arr;


    console.log(zx);
    console.log(arr);
    console.log(arr1);
    console.log(arr2);
    console.log(arr3);
    console.log(obj);
    console.log(arr5);
    console.log("////////////////////////////////////////////");

}

function input_number() {
    let mySet = new Set();
    let rg = 0;
    for (let i = 0; i < 3; i++) {
        for (let j = 0; ((j < 3) && (rg < 9)); j++) {
            if (initial[i][j] === 0) {
                obj[asd[rg+1]].forEach(function (value) {
                    mySet.add(value);
                    console.log(value + " zhopa")
                });
                console.log(obj[asd[rg]]);
            }
            rg++;

        }
    }


    mySet.forEach(function (value) {
        console.log(value + ' govno')
    });
}


input_number();
*/
